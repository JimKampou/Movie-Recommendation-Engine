# -*- coding: utf-8 -*-
"""Movie Recommendation Engine.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zcw5zwiOIpJbMhfKXKxXB00X8zADPsAx
"""

#Building a movie recommendation system

#Import the libraries
import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import CountVectorizer

#Load the data
from google.colab import files
uploaded = files.upload()



#Store the data
df = pd.read_csv('IMDB-Movie-Data.csv')
df['Movie_id'] = range(0,1000)

#Show the first 3 rows of data
df.head(3)

#Get a count id the number of rows/movies in the data set and the number of columns
df.shape

#Create a list of important columns for the recommendation engine
columns = ['Actors', 'Director','Genre','Title']

#Show the data
df[columns].head(3)

#Check for any missing values in important columns
df[columns].isnull().values.any()

#Create a function to combine the values of important columns into a single string
def get_important_features(data):
  important_features = []
  for i in range(0, data.shape[0]):
    important_features.append(data['Actors'][i]+' '+data['Director'][i]+' '+data['Genre'][i]+' '+data['Title'][i])

  return important_features

#Create a column to hold the combined Strings
df['important_features'] = get_important_features(df)

#Show the data
df.head(3)

#convert the text to a matrixof token counts
cm = CountVectorizer().fit_transform(df['important_features'])

#Get the cosine similarity matrix from the count matrix
cs = cosine_similarity(cm)
#Print the cosine similarity matrix
print(cs)

#Get the shape of the cosine similarity matrix, rows and columns
cs.shape

#get the title of the movie that the user likes
title = 'La La Land'

#find the movies id
movie_id = df[df.Title == title]['Movie_id'].values[0]

#Create a list if enumerations for the similarity score [(movie_id, similarity_score),(...)]
scores = list(enumerate(cs[movie_id]))

#Sort the list 
sorted_scores = sorted(scores, key = lambda x:x[1], reverse = True)
sorted_scores = sorted_scores[1:]

#Create a loop to print the first 7 similar movies to our favourite movie
j = 0
print('The 7 most recommended movies to',title, ' are:\n')
for item in sorted_scores:
  movie_title = df[df.Movie_id == item[0]]['Title'].values[0]
  print(j+1, movie_title)
  j = j+1
  if j > 6:
    break

